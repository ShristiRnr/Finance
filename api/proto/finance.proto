syntax = "proto3";

package finance.v1;

option go_package = "github.com/yourorg/yourrepo/financepb;financepb";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/type/money.proto";

// =================== Common & Utilities ===================

message RequestMetadata {
  // Idempotency key for safe retries.
  string request_id = 1;
  // Multi-tenant hints (optional).
  string organization_id = 2;
  string tenant_id = 3;
}

message AuditFields {
  google.protobuf.Timestamp created_at = 1;
  string created_by = 2;
  google.protobuf.Timestamp updated_at = 3;
  string updated_by = 4;
  // Optional optimistic concurrency (e.g., ETag/revision).
  string revision = 5;
}

message PageRequest {
  int32 page_size = 1;   // server may cap (e.g., 1000)
  string page_token = 2; // opaque
  string filter = 3;     // e.g., "status = 'ISSUED' AND due_date < '2025-09-01'"
  string order_by = 4;   // e.g., "invoice_date desc, invoice_number asc"
}

message PageResponse {
  string next_page_token = 1;
  int64 total_size = 2;
}

message Id { string id = 1; }

// Cross-domain reference to other bounded contexts.
message ExternalRef {
  string system = 1; // "CRM", "VMS", "INVENTORY", "GST", "HRMS", "MAINTENANCE", etc.
  string id = 2;     // foreign id in that system
}

// Party pointer into CRM/VMS with a tiny snapshot for UX.
message PartyRef {
  enum Kind {
    KIND_UNSPECIFIED = 0;
    KIND_CUSTOMER = 1; // CRM
    KIND_VENDOR = 2;   // VMS
  }
  Kind kind = 1;
  ExternalRef ref = 2; // system="CRM"/"VMS", id="<party-id>"
  string display_name = 3; // optional small snapshot
}

// =================== Enums ===================

enum InvoiceType {
  INVOICE_TYPE_UNSPECIFIED = 0;
  INVOICE_TYPE_SALES = 1;
  INVOICE_TYPE_PROFORMA = 2;
  INVOICE_TYPE_CHALLAN = 3;
  INVOICE_TYPE_PURCHASE = 4;
}

enum InvoiceStatus {
  INVOICE_STATUS_UNSPECIFIED = 0;
  INVOICE_STATUS_DRAFT = 1;
  INVOICE_STATUS_ISSUED = 2;
  INVOICE_STATUS_PARTIALLY_PAID = 3;
  INVOICE_STATUS_PAID = 4;
  INVOICE_STATUS_VOID = 5;
  INVOICE_STATUS_OVERDUE = 6;
}

enum PaymentStatus {
  PAYMENT_STATUS_UNSPECIFIED = 0;
  PAYMENT_STATUS_DUE = 1;
  PAYMENT_STATUS_PARTIALLY_PAID = 2;
  PAYMENT_STATUS_PAID = 3;
  PAYMENT_STATUS_WRITEOFF = 4;
}

enum NoteType {
  NOTE_TYPE_UNSPECIFIED = 0;
  NOTE_TYPE_CREDIT = 1;
  NOTE_TYPE_DEBIT = 2;
}

enum TaxType {
  TAX_TYPE_UNSPECIFIED = 0;
  TAX_TYPE_CGST = 1;
  TAX_TYPE_SGST = 2;
  TAX_TYPE_IGST = 3;
  TAX_TYPE_VAT = 4;
  TAX_TYPE_OTHER = 10;
}

enum LedgerSide {
  LEDGER_SIDE_UNSPECIFIED = 0;
  LEDGER_SIDE_DEBIT = 1;
  LEDGER_SIDE_CREDIT = 2;
}

// =================== Tax & GST blocks ===================

message TaxLine {
  TaxType type = 1;
  double rate_percent = 2;          // e.g., 18.0
  google.type.Money amount = 3;     // computed or provided
}

message GstTaxRegime {
  string gstin = 1;            // seller GSTIN
  string place_of_supply = 2;  // state code
  bool reverse_charge = 3;
}

message GstDocStatus {
  enum EInvoiceStatus {
    EINV_STATUS_UNSPECIFIED = 0;
    EINV_PENDING = 1;
    EINV_GENERATED = 2;
    EINV_CANCELLED = 3;
    EINV_FAILED = 4;
  }
  enum EWayStatus {
    EWAY_STATUS_UNSPECIFIED = 0;
    EWAY_PENDING = 1;
    EWAY_GENERATED = 2;
    EWAY_EXPIRED = 3;
    EWAY_CANCELLED = 4;
    EWAY_FAILED = 5;
  }

  // E-invoice
  EInvoiceStatus einvoice_status = 1;
  string irn = 2;          // Invoice Reference Number
  string ack_no = 3;
  google.protobuf.Timestamp ack_date = 4;

  // E-way bill
  EWayStatus eway_status = 5;
  string eway_bill_no = 6;
  google.protobuf.Timestamp eway_valid_upto = 7;

  string last_error = 8;
  google.protobuf.Timestamp last_synced_at = 9;
}

// =================== Invoice Management ===================

message InvoiceItem {
  string id = 1;
  string name = 2;
  string description = 3;
  string hsn = 4;                   // keep string; leading zeros possible
  int32 quantity = 5;
  google.type.Money unit_price = 6;
  google.type.Money line_subtotal = 7; // pre-tax/discount
  repeated TaxLine taxes = 8;
  google.type.Money line_total = 9;    // subtotal + taxes
  string cost_center_id = 10;          // for base cost accounting
}

message Invoice {
  string id = 1;
  string invoice_number = 2;
  InvoiceType type = 3;
  google.protobuf.Timestamp invoice_date = 4;
  google.protobuf.Timestamp due_date = 5;
  google.protobuf.Timestamp delivery_date = 6;

  PartyRef party = 7;

  string organization_id = 8;

  string po_number = 9;
  string eway_number_legacy = 10; // optional legacy field; prefer gst_docs
  string status_note = 11;

  InvoiceStatus status = 12;

  // Payments/logistics references
  string payment_reference = 13;   // cheque/UTR/ref no.
  string challan_number = 14;
  google.protobuf.Timestamp challan_date = 15;
  string lr_number = 16;
  string transporter_name = 17;
  string transporter_id = 18;
  string vehicle_number = 19;
  string against_invoice_number = 20;
  google.protobuf.Timestamp against_invoice_date = 21;

  repeated InvoiceItem items = 22;

  // Totals
  google.type.Money subtotal = 23;     // sum of line_subtotals
  repeated TaxLine taxes = 24;         // invoice-level taxes (if any)
  google.type.Money total = 25;

  AuditFields audit = 26;

  // GST integration (optional)
  GstTaxRegime gst = 29;
  GstDocStatus gst_docs = 30;

  // Links to other systems for traceability (Inventory reservation, etc.)
  repeated ExternalRef external_refs = 31;
}

message CreateInvoiceRequest {
  RequestMetadata meta = 1;
  Invoice invoice = 2;
}
message UpdateInvoiceRequest {
  RequestMetadata meta = 1;
  Invoice invoice = 2;
  google.protobuf.FieldMask update_mask = 3;
}
message GetInvoiceRequest { string id = 1; }
message DeleteInvoiceRequest { RequestMetadata meta = 1; string id = 2; }

message ListInvoicesRequest { PageRequest page = 1; }
message ListInvoicesResponse {
  repeated Invoice invoices = 1;
  PageResponse page = 2;
}

service InvoiceService {
  rpc CreateInvoice(CreateInvoiceRequest) returns (Invoice);
  rpc GetInvoice(GetInvoiceRequest) returns (Invoice);
  rpc ListInvoices(ListInvoicesRequest) returns (ListInvoicesResponse);
  rpc UpdateInvoice(UpdateInvoiceRequest) returns (Invoice);
  rpc DeleteInvoice(DeleteInvoiceRequest) returns (google.protobuf.Empty);
}

// =================== Credit/Debit Notes ===================

message CreditDebitNote {
  string id = 1;
  string invoice_id = 2;
  NoteType type = 3;
  google.type.Money amount = 4;
  string reason = 5;
  AuditFields audit = 6;
  repeated ExternalRef external_refs = 7;
}

message CreateCreditDebitNoteRequest {
  RequestMetadata meta = 1;
  CreditDebitNote note = 2;
}
message UpdateCreditDebitNoteRequest {
  RequestMetadata meta = 1;
  CreditDebitNote note = 2;
  google.protobuf.FieldMask update_mask = 3;
}
message GetCreditDebitNoteRequest { string id = 1; }
message ListCreditDebitNotesRequest { PageRequest page = 1; }
message ListCreditDebitNotesResponse {
  repeated CreditDebitNote notes = 1;
  PageResponse page = 2;
}
message DeleteCreditDebitNoteRequest { RequestMetadata meta = 1; string id = 2; }

service CreditDebitNoteService {
  rpc CreateCreditDebitNote(CreateCreditDebitNoteRequest) returns (CreditDebitNote);
  rpc GetCreditDebitNote(GetCreditDebitNoteRequest) returns (CreditDebitNote);
  rpc ListCreditDebitNotes(ListCreditDebitNotesRequest) returns (ListCreditDebitNotesResponse);
  rpc UpdateCreditDebitNote(UpdateCreditDebitNoteRequest) returns (CreditDebitNote);
  rpc DeleteCreditDebitNote(DeleteCreditDebitNoteRequest) returns (google.protobuf.Empty);
}

// =================== Payments & Bank Reconciliation ===================

message PaymentDue {
  string id = 1;
  string invoice_id = 2;
  google.type.Money amount_due = 3;
  google.protobuf.Timestamp due_date = 4;
  PaymentStatus status = 5;
  AuditFields audit = 6;
  repeated ExternalRef external_refs = 7;
}

message CreatePaymentDueRequest {
  RequestMetadata meta = 1;
  PaymentDue due = 2;
}
message MarkPaymentAsPaidRequest {
  RequestMetadata meta = 1;
  string id = 2;
  google.type.Money amount_paid = 3;  // for partial payments
  google.protobuf.Timestamp paid_at = 4;
  string reference = 5;               // bank txn id / UTR / cheque
}
message ListPaymentDuesRequest { PageRequest page = 1; }
message ListPaymentDuesResponse {
  repeated PaymentDue dues = 1;
  PageResponse page = 2;
}

service PaymentService {
  rpc CreatePaymentDue(CreatePaymentDueRequest) returns (PaymentDue);
  rpc MarkPaymentAsPaid(MarkPaymentAsPaidRequest) returns (PaymentDue);
  rpc ListPaymentDues(ListPaymentDuesRequest) returns (ListPaymentDuesResponse);
}

message BankTransaction {
  string id = 1;                       // statement line id
  google.type.Money amount = 2;
  google.protobuf.Timestamp transaction_date = 3;
  string description = 4;
}

message ReconcileTransactionRequest {
  RequestMetadata meta = 1;
  string bank_transaction_id = 2;
  string ledger_entry_id = 3; // or invoice/payment id
  google.type.Money amount = 4;
  google.protobuf.Timestamp transaction_date = 5;
}

message Reconciliation {
  bool matched = 1;
  string status = 2; // "MATCHED", "PARTIAL_MATCH", "UNMATCHED"
  string match_reason = 3;
}

service BankReconciliationService {
  rpc ReconcileTransaction(ReconcileTransactionRequest) returns (Reconciliation);
}

// =================== Ledger & Reports ===================

message LedgerEntry {
  string id = 1;
  string account_id = 2;             // chart-of-accounts key
  string description = 3;
  LedgerSide side = 4;
  google.type.Money amount = 5;
  google.protobuf.Timestamp transaction_date = 6;
  string cost_center_id = 7;
  string reference_type = 8;         // "INVOICE"/"PAYMENT"/"EXPENSE"
  string reference_id = 9;
  AuditFields audit = 10;
  repeated ExternalRef external_refs = 11;
}

message CreateLedgerEntryRequest {
  RequestMetadata meta = 1;
  LedgerEntry entry = 2;
}
message ListLedgerEntriesRequest { PageRequest page = 1; }
message ListLedgerEntriesResponse {
  repeated LedgerEntry entries = 1;
  PageResponse page = 2;
}

service LedgerService {
  rpc CreateLedgerEntry(CreateLedgerEntryRequest) returns (LedgerEntry);
  rpc ListLedgerEntries(ListLedgerEntriesRequest) returns (ListLedgerEntriesResponse);
}

message ReportPeriod {
  google.protobuf.Timestamp start_date = 1;
  google.protobuf.Timestamp end_date = 2;
}

message ProfitLossReport {
  google.type.Money total_revenue = 1;
  google.type.Money total_expenses = 2;
  google.type.Money net_profit = 3;
}

message BalanceSheetReport {
  google.type.Money total_assets = 1;
  google.type.Money total_liabilities = 2;
  google.type.Money net_worth = 3;
}

message TrialBalanceReport {
  repeated LedgerEntry entries = 1;
}

message ReportRequest {
  ReportPeriod period = 1;
  string organization_id = 2;
}

service FinancialReportService {
  rpc GenerateProfitLossReport(ReportRequest) returns (ProfitLossReport);
  rpc GenerateBalanceSheetReport(ReportRequest) returns (BalanceSheetReport);
  rpc GenerateTrialBalanceReport(ReportRequest) returns (TrialBalanceReport);
  // Phase 2+
  rpc GenerateComplianceReport(ComplianceReportRequest) returns (ComplianceReport);
}

// =================== Budgeting ===================

message Budget {
  string id = 1;
  string name = 2;
  google.type.Money total_amount = 3;
  string status = 4; // consider enum later
  AuditFields audit = 5;
  repeated ExternalRef external_refs = 6;
}

message CreateBudgetRequest {
  RequestMetadata meta = 1;
  Budget budget = 2;
}
message ListBudgetsRequest { PageRequest page = 1; }
message ListBudgetsResponse {
  repeated Budget budgets = 1;
  PageResponse page = 2;
}

service BudgetService {
  rpc CreateBudget(CreateBudgetRequest) returns (Budget);
  rpc ListBudgets(ListBudgetsRequest) returns (ListBudgetsResponse);
}

message BudgetAllocation {
  string id = 1;
  string budget_id = 2;
  string department_id = 3;
  google.type.Money allocated_amount = 4;
  google.type.Money spent_amount = 5;
  google.type.Money remaining_amount = 6;
  AuditFields audit = 7;
  repeated ExternalRef external_refs = 8;
}

message AllocateBudgetRequest {
  RequestMetadata meta = 1;
  BudgetAllocation allocation = 2;
}
message ListBudgetAllocationsRequest { PageRequest page = 1; }
message ListBudgetAllocationsResponse {
  repeated BudgetAllocation allocations = 1;
  PageResponse page = 2;
}

message BudgetComparisonRequest { string budget_id = 1; }
message BudgetComparisonResponse {
  string budget_id = 1;
  google.type.Money total_budget = 2;
  google.type.Money total_allocated = 3;
  google.type.Money total_spent = 4;
  google.type.Money remaining_budget = 5;
}

service BudgetAllocationService {
  rpc AllocateBudget(AllocateBudgetRequest) returns (BudgetAllocation);
  rpc ListBudgetAllocations(ListBudgetAllocationsRequest) returns (ListBudgetAllocationsResponse);
}

service BudgetComparisonService {
  rpc GetBudgetComparisonReport(BudgetComparisonRequest) returns (BudgetComparisonResponse);
}

// =================== Expenses & Cost Accounting (base) ===================

message Expense {
  string id = 1;
  string category = 2; // "LABOR","MATERIAL","OPEX","CAPEX"...
  google.type.Money amount = 3;
  google.protobuf.Timestamp expense_date = 4;
  string cost_center_id = 5;
  AuditFields audit = 6;
  repeated ExternalRef external_refs = 7;
}

message CreateExpenseRequest {
  RequestMetadata meta = 1;
  Expense expense = 2;
}
message ListExpensesRequest { PageRequest page = 1; }
message ListExpensesResponse {
  repeated Expense expenses = 1;
  PageResponse page = 2;
}

service ExpenseService {
  rpc CreateExpense(CreateExpenseRequest) returns (Expense);
  rpc ListExpenses(ListExpensesRequest) returns (ListExpensesResponse);
}

message CostCenter {
  string id = 1;
  string name = 2;
  string description = 3;
  AuditFields audit = 4;
}

message CreateCostCenterRequest {
  RequestMetadata meta = 1;
  CostCenter center = 2;
}
message ListCostCentersRequest { PageRequest page = 1; }
message ListCostCentersResponse {
  repeated CostCenter centers = 1;
  PageResponse page = 2;
}

message CostAllocation {
  string id = 1;
  string cost_center_id = 2;
  google.type.Money amount = 3;
  string reference_type = 4; // INVOICE/EXPENSE/etc.
  string reference_id = 5;
  AuditFields audit = 6;
}

message AllocateCostRequest {
  RequestMetadata meta = 1;
  string cost_center_id = 2;
  google.type.Money amount = 3;
  string reference_type = 4;
  string reference_id = 5;
}
message AllocateCostResponse { CostAllocation allocation = 1; }

service CostAccountingService {
  rpc CreateCostCenter(CreateCostCenterRequest) returns (CostCenter);
  rpc ListCostCenters(ListCostCentersRequest) returns (ListCostCentersResponse);
  rpc AllocateCost(AllocateCostRequest) returns (AllocateCostResponse);
}

// =================== Accruals (Phase 2) ===================

message Accrual {
  string id = 1;
  string description = 2;
  google.type.Money amount = 3;
  google.protobuf.Timestamp accrual_date = 4;
  AuditFields audit = 5;
  repeated ExternalRef external_refs = 6;
}

message CreateAccrualRequest { RequestMetadata meta = 1; Accrual accrual = 2; }
message ListAccrualsRequest { PageRequest page = 1; }
message ListAccrualsResponse { repeated Accrual accruals = 1; PageResponse page = 2; }

service AccrualService {
  rpc CreateAccrual(CreateAccrualRequest) returns (Accrual);
  rpc ListAccruals(ListAccrualsRequest) returns (ListAccrualsResponse);
}

// =================== Compliance (Phase 2) ===================

message ComplianceReportRequest {
  ReportPeriod period = 1;
  string jurisdiction = 2; // "IN-GST", "US-GAAP", "IFRS"
}
message ComplianceReport { string details = 1; }

service FinancialComplianceService {
  rpc GenerateComplianceReport(ComplianceReportRequest) returns (ComplianceReport);
}

// =================== Consolidation & Treasury (Phase 3) ===================

message ConsolidationRequest { repeated string entity_ids = 1; ReportPeriod period = 2; }
message ConsolidationResponse { string report = 1; }

service ConsolidationService {
  rpc ConsolidateEntities(ConsolidationRequest) returns (ConsolidationResponse);
}

message CashFlowForecastRequest { ReportPeriod period = 1; }
message CashFlowForecastResponse { string forecast_details = 1; }

service TreasuryService {
  rpc GenerateCashFlowForecast(CashFlowForecastRequest) returns (CashFlowForecastResponse);
}

// =================== Audit Trail ===================

message AuditEvent {
  string id = 1;
  string user_id = 2;
  string action = 3;
  google.protobuf.Timestamp timestamp = 4;
  string details = 5;
  string resource_type = 6; // e.g., INVOICE
  string resource_id = 7;
}

message RecordAuditEventRequest { RequestMetadata meta = 1; AuditEvent event = 2; }
message ListAuditEventsRequest { PageRequest page = 1; }
message ListAuditEventsResponse { repeated AuditEvent events = 1; PageResponse page = 2; }

service AuditTrailService {
  rpc RecordAuditEvent(RecordAuditEventRequest) returns (AuditEvent);
  rpc ListAuditEvents(ListAuditEventsRequest) returns (ListAuditEventsResponse);
}
